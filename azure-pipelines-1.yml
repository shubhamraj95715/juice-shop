trigger:
- master

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'fbaad1e8-a637-4341-b503-3a75bfc153a1'
  imageRepository: 'shubhamrajjuiceshop'
  containerRegistry: 'testacr1276.azurecr.io'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'
  acrName: 'testacr1276.azurecr.io'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:

    # Debugging step to check file structure
    - script: |
        ls -R $(Build.SourcesDirectory)
      displayName: 'List files in source directory'

    # Step 1: Manually compile and package the Java application
    - script: |
        mkdir -p target
        javac -d target/ $(find . -name "*.java")  # Compile the Java files
        jar cvf target/app.jar -C target/ .        # Package the compiled classes into a JAR
      displayName: 'Manually compile and package Java application'

    # Step 2: Generate Dockerfile dynamically for Java application
    - script: |
        echo "FROM openjdk:11-jre-slim" > $(Build.SourcesDirectory)/Dockerfile
        echo "WORKDIR /app" >> $(Build.SourcesDirectory)/Dockerfile
        echo "COPY target/app.jar app.jar" >> $(Build.SourcesDirectory)/Dockerfile
        echo "EXPOSE 8080" >> $(Build.SourcesDirectory)/Dockerfile
        echo "ENTRYPOINT [\"java\", \"-jar\", \"app.jar\"]" >> $(Build.SourcesDirectory)/Dockerfile
      displayName: 'Generate Dockerfile for Java app'

    # Step 3: Run Kaniko to build and push the Docker image
    - script: |
        docker run \
          -v $(Build.SourcesDirectory):/workspace \
          -v /kaniko/.docker:/kaniko/.docker \
          -e DOCKER_CONFIG=/kaniko/.docker \
          gcr.io/kaniko-project/executor:latest \
          --context /workspace \
          --dockerfile /workspace/Dockerfile \
          --destination=$(acrName)/$(imageRepository):$(tag)
      displayName: 'Build and push Docker image using Kaniko'
